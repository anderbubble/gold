<chapter id="Installation">
    <title>Installation</title>
    <para>
Gold uses the standard configure, make and make install steps.  
Additionally, there are a number of prerequisite steps that need to be
completed prior to installation.
    </para>

    <sect1 id="Prerequisites">
      <title>Install Prerequisites</title>
      <para>
You will need the following packages installed in order to build and run GOLD.  In general, it is suggested to use the binary packages supplied with your operating system.  If packages are not available, the desired packages will need to be compiled from source.  For assistance with this, please see Appendix A: Compiling Dependencies From Source.
      </para>

      <sect2>
        <title>Perl 5.6.1 or higher (with suidperl) [REQUIRED]</title>
        <para>
The gold server and clients are written in Perl. Perl 5.6.1 or higher
is required. The perl installation must include suidperl for proper
client authentication. Use 'perl -v' to see what level of Perl is
installed and 'suidperl -v' to see if suidperl is installed. 
        </para>
      </sect2>

      <sect2>
        <title>libxml2 2.4.25 or higher [REQUIRED]</title>
        <para>
LibXML2 is needed by the XML::LibXML perl module to communicate via the SSSRMAP message format.
        </para>
      </sect2>

      <sect2>
        <title>PostgreSQL database 7.2 or higher [RECCOMENDED]</title>
        <para>
Robust alternative to SQLLite.
        </para>
      </sect2>

      <sect2>
        <title>Gnu readline 2.0 or higher [OPTIONAL]</title>
        <para>
Required for the command-line-editing capabilities of the interactive control program (goldsh)
        </para>
      </sect2>

      <sect2>
        <title>Apache Httpd Server 2.0 or higher [OPTIONAL]</title>
        <para>
Required for the GOLD web based gui.
        </para>
      </sect2>

      <sect2>
        <title>OpenSSL 0.9.5a or higher [OPTIONAL]</title>
        <para>
Required for the GOLD web based gui.
        </para>
      </sect2>
      <sect2>
        <title>mod_ssl 2.26 or higher [OPTIONAL]</title>
        <para>
Required for the GOLD web based gui.
        </para>
      </sect2>
      <sect2>
        <title>Python [OPTIONAL]</title>
        <para>
Required for the Scalable System Software directory service (ssslib). 
        </para>
      </sect2>
      <sect2>
        <title>elementtree [OPTIONAL]</title>
        <para>
Required for the Scalable System Software directory service (ssslib). 
        </para>
      </sect2>
      <sect2>
        <title>ssslib [OPTIONAL]</title>
        <para>
Provides the Scalable System Software directory service.
        </para>
      </sect2>
    </sect1>

    <sect1 id="Preparation">
      <title>Preparation</title>
      <para>
To build and install Gold, you first need to unpack the archive and
change directory into the top directory of the distribution.  For
security reasons, it is recommended that you install and run Gold
under its own non-root userid.
      </para>
      <para>
        <userinput><prompt>[root]# </prompt>
useradd gold
        </userinput>
      </para>
      <para>
        <userinput><prompt>[root]# </prompt>
passwd gold
        </userinput>
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
mkdir ~/src
        </userinput>
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
cd ~/src
        </userinput>
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
gzip -cd gold-2.0.0.0.tar.gz | tar xvf -
        </userinput>
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
cd gold-2.0.0.0
        </userinput>
      </para>
    </sect1>

    <sect1 id="Configure">
      <title>Configuration</title>
      <para>
To configure Gold, run the "configure" script provided with the distribution.
      </para>

      <literallayout>
To see the list of options:
    
  -h, &mdash;help              display the list of options

Use prefix to tell it where Gold should be installed (defaults to /usr/local):

  &mdash;prefix=PREFIX         install architecture-independent files in PREFIX

Use with-db to specify the database you intend to use with Gold. Currently only PostgreSQL (Pg) and SQLite have been tested for use with Gold. Postgres is an external database which runs in a distinct (possibly remote) process and communicates over sockets while SQLite is an embedded database bundled with Gold with SQL queries being performed within the goldd process itself through library calls. Initial testing has shown SQLite to be at least as fast as PostgreSQL for small installations. The default is to use PostgreSQL.

  &mdash;with-db=DATABASE      database to be used { Pg, SQLite } [Pg]

Use without-readline if you do not want to use the gnu readline library

  &mdash;without-readline      Don't use readline in interactive control program

Use with-user to specify the userid that gold will run under (defaults to the
user running the configure command).

  &mdash;with-user=USER        user id under which the gold server will run

Use with-log-dir to specify the directory to which logs will be written
(defaults to PREFIX/log).

  &mdash;with-log-dir=PATH     directory for log files [PREFIX/log]

Use with-perl-libs to indicate whether you want to install the required perl modules in a local gold directory (PREFIX/lib) or in the default system site-perl directory (triggered by running make deps).

  &mdash;with-perl-libs=local|site       install policy for prerequisite perl libs [local]

Use with-gold-libs to indicate whether you want to install the Gold modules in a local gold directory (PREFIX/lib) or in the default system site-perl directory (defaults to local).

  &mdash;with-gold-libs=local|site  install policy for Gold perl libs [local]

Use &mdash;with-cgi-bin to indicate where you want the Gold gui files for the web server to be installed.

  &mdash;with-cgi-bin=PATH

The PERL environment variable helps the install process find the desired (5.6) perl interpreter if it is not in your path or not found first in a path search.

  PERL        full pathname of the Perl interpreter

Some other influential environment variables are:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L&lt;lib dir&gt; if you have libraries in a
              nonstandard directory &lt;lib dir&gt;
  CPPFLAGS    C/C++ preprocessor flags, e.g. -I&lt;include dir&gt; if you have
              headers in a nonstandard directory &lt;include dir&gt;
      </literallayout>
      <para>
So, as an example you might use something like:
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
cd gold-2.0.0.0
        </userinput>
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
./configure &mdash;prefix=/usr/local/gold -with-cgi-bin=/var/www/cgi-bin
        </userinput>
      </para>
    </sect1>

    <sect1 id="Compilation">
      <title>Compilation</title>
      <para>
To compile the program, type make:
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
make
        </userinput>
      </para>
    </sect1>

    <sect1 id="Dependencies">
      <title>Perl Module Dependencies</title>
      <para>
Gold requires the use of a number of Perl modules. These modules are included
in tarball form in the Gold distribution and they can be installed by typing
'make deps':
      </para>
      <para>
        <userinput><prompt>[root]# </prompt>
make deps
        </userinput>
      </para>
      <para>
This will install the following Perl modules as necessary. By default, these will be installed under gold's lib/perl5 directory. To install these in the system site-perl directory, use the configure parameter with-perl-libs as described in the configuration section.
      </para>
      <literallayout>
    CGI::Session
    CGI
    Compress::Zlib
    Crypt::CBC
    Crypt::DES
    Crypt::DES_EDE3
    Data::Properties
    Date::Manip
    DBI
    DBD::Pg or DBD::SQLite
    Digest
    Digest::HMAC
    Digest::MD5
    Digest::SHA1
    Error
    Log::Dispatch
    Log::Dispatch::FileRotate
    Log::Log4perl
    MIME::Base64
    Module::Build
    Params::Validate
    Term::ReadLine::Gnu
    Time::HiRes
    XML::SAX
    XML::LibXML::Common
    XML::LibXML
    XML::NamespaceSupport
      </literallayout>
      <para>
If you would prefer to do so, you could install these modules via other sources,
 such as from rpm, or from CPAN using 'perl -MCPAN -e shell'. If you installed l
ibxml2 into /usr/local then you will probably need to add /usr/local/bin in fron
t of your PATH so that xml-config can be located when installing the XML depende
ncies.
      </para>
    </sect1>

    <sect1 id="Install">
      <title>Installation</title>
      <para>
Use `make install' to install Gold. You may need to do this as root if any of the installation or log directories do not already have write permission as the gold admin user.
      </para>
      <para>
        <userinput><prompt>[root]# </prompt>
make install
        </userinput>
      </para>
      <para>
If you would like to try out the alpha web-gui, type make install-gui.
      </para>
      <para>
        <userinput><prompt>[root]# </prompt>
make install-gui
        </userinput>
      </para>
      <para>
The standard installation process will copy the binaries and perl scripts to /usr/local/bin, install the server in /usr/local/sbin, put the libs in /usr/local/lib, the config files in /usr/local/etc and the man pages in /usr/local/man. You can customize the directories either through the configuration process or by making the necessary changes in the Makefile.
      </para>
      <para>
To delete the files created by the Gold installation, you can use 'make uninstall'.
      </para>
      <para>
        <userinput><prompt>[root]# </prompt>
make uninstall         </userinput>
      </para>
      <para>
You will also need to generate a secret key which enables secure communication
between clients and server. This key is a pass-phrase consisting of up to 80
characters and can include spaces and the regular visible ASCII characters.
Note that if you are using Gold with the Maui Scheduler, they will need both
need to use a shared secret key.
      </para>
      <para>
        <userinput><prompt>[root]# </prompt>
make auth_key
        </userinput>
      </para>
      <screen>
Enter your secret key (up to 80 characters and can include spaces): sss
      </screen>
    </sect1>

    <sect1 id="GeneralSetup">
      <title>General Setup</title>
      <para>
Edit the Gold configuration files as necessary.
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
vi /usr/local/gold/etc/goldd.conf
        </userinput>
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
vi /usr/local/gold/etc/gold.conf
        </userinput>
      </para>
      <para>
Configure your environment to set the following environment variables:

PATH      - [RECOMMENDED] Should contain PREFIX/bin and PREFIX/sbin (for gold user).
GOLD_HOME - [OPTIONAL]    Set to the installation root (PREFIX).

      </para>
    </sect1>

    <sect1 id="DatabaseSetup">
      <title>Database Setup</title>
      <para>
If you have chosen to use PostgreSQL, you will need to configure the database to support Gold connections and schema. No setup is needed if you are using SQLite.
      </para>
      <para>
Initialize the database (if you installed from tarball).
      </para>
      <para>
        <userinput><prompt>[postgres]$ </prompt>
initdb -D /usr/local/pgsql/data
        </userinput>
      </para>
      <para>
Add the IP ADDRESS of the host where the Gold server will run (even if it is the same host as the database server).
      </para>
      <para>
        <userinput><prompt>[postgres]$ </prompt>
echo "host    all         all         192.168.1.1    255.255.255.255   trust" >>/usr/local/pgsql/data/pg_hba.conf
        </userinput>
      </para>
      <para>
Startup postgres with the -i option to allow internet domain sockets
      </para>
      <para>
        <userinput><prompt>[postgres]$ </prompt>
postmaster -i -D /usr/local/pgsql/data >/var/log/pgsql 2>&amp;1 &amp;
        </userinput>
      </para>
      <para>
Add the "gold" user as a database administrator
      </para>
      <para>
        <userinput><prompt>[postgres]$ </prompt>
createuser gold
        </userinput>
      </para>
      <screen>
Shall the new user be allowed to create databases? y
Shall the new user be allowed to create more new users? n
CREATE USER
      </screen>
      <para>
Create the gold database
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
createdb gold
        </userinput>
      </para>
      <screen>
CREATE DATABASE
      </screen>
      <para>
You may need to edit the goldd.conf or gold.conf files to reflect the configuration of your database.
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
vi /usr/local/gold/etc/goldd.conf
        </userinput>
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
vi /usr/local/gold/etc/gold.conf
        </userinput>
      </para>
      <para>
Test that the database was correctly created.
      </para>
    </sect1>

    <sect1 id="WebServerSetup">
      <title>Web Server Setup</title>
      <para>
If you want to use the Gold web GUI, you will need to configure your Httpd server to use SSL. For RedHat Linux systems, a good guide on this is "Buiding a Secure RedHat Apache Server HOWTO" at &lt;http://www.faqs.org/docs/Linux-HOWTO/SSL-RedHat-HOWTO.html&gt;.
      </para>
      <para>
The following shows an example configuration that involves making some modifications to the httpd configuration to support the use of cgi-bin and SSL connections as well as the creation of a private key and a self-signed certificate.
      </para>
      <para>
	You'll need to edit the httpd.conf file under /etc/httpd/conf
	or wherever your installation puts it.  You need to configure
	it to make sure your cgi-bin directory agrees with the cgi-bin
	directory you chose when you configured Gold.  Foe example:
	<screen>
&lt;Directory "/var/www/cgi-bin"&gt;
  Options ExecCGI
  AddHandler cgi-script .cgi .pl
&lt;/Directory&gt;
	</screen>
      </para>
      <para>
	You may also need to add a VirtualHost definition with the
      locations of the ssl certificates. It could look something like:
	<screen>
&lt;VirtualHost 192.168.72.24:443&gt;
  DocumentRoot /var/www/cgi-bin
  ServerName gold-server.whatever.org
  ServerAdmin Your.Email@whatever.org
  ErrorLog logs/gold-error_log
  TransferLog logs/gold-access_log
  SSLEngine on
  SSLCertificateFile /etc/httpd/conf/ssl.crt/gold-server.crt
  SSLCertificateKeyFile /etc/httpd/conf/ssl.key/gold-server.key
  SetEnvIf User-Agent ".*MSIE.*" nokeepalive ssl-unclean-shutdown
&lt;/VirtualHost&gt;
      </screen>
      </para>
      <para>
	The secure ssl communication will requre certificate and key
      files as specified in the httpd.conf file.  To create these you
      should be able to do something like:
     	<userinput><prompt>[root]# </prompt>
	  openssl genrsa -out ssl.key/gold-server.key 1024
	</userinput>
	<userinput><prompt>[root]# </prompt>
	  openssl req -new -key ssl.key/gold-server.key -x509 -out ssl.crt/gold--server.crt
	</userinput>
      </para>
      <para>
	Once you get the certificates, keys and the httpd.conf
      configured how you want it, you'll need to restart httpd.
      </para>
      <para>
	<userinput><prompt>[root]# </prompt>
	  /usr/sbin/apachectl restart
	</userinput>
      </para>
      <para>
	In order to use the web gui, users will have to generate
      passwords for themselves using the gchpasswd client command.
	<userinput><prompt>[$user] </prompt>
	  gchpasswd
	</userinput>
      </para>
      <para>
	To access the web gui, open a browser with url: https://your.server/gold.cgi
      </para>
    </sect1>
    <sect1 id="Bootstrap">
      <title>Bootstrap</title>
      <para>
	You will need to populate the gold database with an sql dump that defines the objects,
	actions and attributes necessary to function as an Accounting and Allocation Manager.
      </para>
      <para>
	If you are using PostgreSQL:
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
	  psql gold &lt; bank.sql
        </userinput>
      </para>
      <para>
	If you are using SQLite:
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
	  /usr/local/gold/sbin/sqlite /usr/local/gold/data/gold.db &lt; bank.sql
        </userinput>
      </para>
    </sect1>
    
    <sect1 id="Startup">
      <title>Startup</title>
      <para>
	Start the gold server daemon. It is located in the PREFIX/sbin directory.
      </para>
      <para>
        <userinput><prompt>[gold]$ </prompt>
	  /usr/local/gold/sbin/goldd
        </userinput>
      </para>
      <para>
	Alternatively, if you are on linux system that supports init.d scripts,
	you can add an add gold as a system startup service by copying etc/gold.d to
	/etc/init.d/gold, giving it execute permission, and then start gold by issuing:
      </para>
      <para>
        <userinput><prompt>[root]# </prompt>
	  service gold start
        </userinput>
      </para>
    </sect1>
    
    <sect1 id="Initialization">
      <title>Initialization</title>
      <para>
	You are now ready to define users, projects, machines, accounts etc. as necessary for your site. The next chapter (Getting Started) provides a useful primer for this phase of the Gold setup.
      </para>
    </sect1>
    
</chapter>
